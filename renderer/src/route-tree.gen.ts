/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as ShutdownRouteImport } from "./routes/shutdown"
import { Route as SettingsRouteImport } from "./routes/settings"
import { Route as SecretsRouteImport } from "./routes/secrets"
import { Route as ClientsRouteImport } from "./routes/clients"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as LogsServerNameRouteImport } from "./routes/logs.$serverName"
import { Route as registryRegistryRouteImport } from "./routes/(registry)/registry"
import { Route as registryRegistryNameRouteImport } from "./routes/(registry)/registry_.$name"

const ShutdownRoute = ShutdownRouteImport.update({
  id: "/shutdown",
  path: "/shutdown",
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRouteImport,
} as any)
const SecretsRoute = SecretsRouteImport.update({
  id: "/secrets",
  path: "/secrets",
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsRoute = ClientsRouteImport.update({
  id: "/clients",
  path: "/clients",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const LogsServerNameRoute = LogsServerNameRouteImport.update({
  id: "/logs/$serverName",
  path: "/logs/$serverName",
  getParentRoute: () => rootRouteImport,
} as any)
const registryRegistryRoute = registryRegistryRouteImport.update({
  id: "/(registry)/registry",
  path: "/registry",
  getParentRoute: () => rootRouteImport,
} as any)
const registryRegistryNameRoute = registryRegistryNameRouteImport.update({
  id: "/(registry)/registry_/$name",
  path: "/registry/$name",
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/clients": typeof ClientsRoute
  "/secrets": typeof SecretsRoute
  "/settings": typeof SettingsRoute
  "/shutdown": typeof ShutdownRoute
  "/registry": typeof registryRegistryRoute
  "/logs/$serverName": typeof LogsServerNameRoute
  "/registry/$name": typeof registryRegistryNameRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/clients": typeof ClientsRoute
  "/secrets": typeof SecretsRoute
  "/settings": typeof SettingsRoute
  "/shutdown": typeof ShutdownRoute
  "/registry": typeof registryRegistryRoute
  "/logs/$serverName": typeof LogsServerNameRoute
  "/registry/$name": typeof registryRegistryNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/clients": typeof ClientsRoute
  "/secrets": typeof SecretsRoute
  "/settings": typeof SettingsRoute
  "/shutdown": typeof ShutdownRoute
  "/(registry)/registry": typeof registryRegistryRoute
  "/logs/$serverName": typeof LogsServerNameRoute
  "/(registry)/registry_/$name": typeof registryRegistryNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/clients"
    | "/secrets"
    | "/settings"
    | "/shutdown"
    | "/registry"
    | "/logs/$serverName"
    | "/registry/$name"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/clients"
    | "/secrets"
    | "/settings"
    | "/shutdown"
    | "/registry"
    | "/logs/$serverName"
    | "/registry/$name"
  id:
    | "__root__"
    | "/"
    | "/clients"
    | "/secrets"
    | "/settings"
    | "/shutdown"
    | "/(registry)/registry"
    | "/logs/$serverName"
    | "/(registry)/registry_/$name"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientsRoute: typeof ClientsRoute
  SecretsRoute: typeof SecretsRoute
  SettingsRoute: typeof SettingsRoute
  ShutdownRoute: typeof ShutdownRoute
  registryRegistryRoute: typeof registryRegistryRoute
  LogsServerNameRoute: typeof LogsServerNameRoute
  registryRegistryNameRoute: typeof registryRegistryNameRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/shutdown": {
      id: "/shutdown"
      path: "/shutdown"
      fullPath: "/shutdown"
      preLoaderRoute: typeof ShutdownRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/settings": {
      id: "/settings"
      path: "/settings"
      fullPath: "/settings"
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/secrets": {
      id: "/secrets"
      path: "/secrets"
      fullPath: "/secrets"
      preLoaderRoute: typeof SecretsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/clients": {
      id: "/clients"
      path: "/clients"
      fullPath: "/clients"
      preLoaderRoute: typeof ClientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/logs/$serverName": {
      id: "/logs/$serverName"
      path: "/logs/$serverName"
      fullPath: "/logs/$serverName"
      preLoaderRoute: typeof LogsServerNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/(registry)/registry": {
      id: "/(registry)/registry"
      path: "/registry"
      fullPath: "/registry"
      preLoaderRoute: typeof registryRegistryRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/(registry)/registry_/$name": {
      id: "/(registry)/registry_/$name"
      path: "/registry/$name"
      fullPath: "/registry/$name"
      preLoaderRoute: typeof registryRegistryNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientsRoute: ClientsRoute,
  SecretsRoute: SecretsRoute,
  SettingsRoute: SettingsRoute,
  ShutdownRoute: ShutdownRoute,
  registryRegistryRoute: registryRegistryRoute,
  LogsServerNameRoute: LogsServerNameRoute,
  registryRegistryNameRoute: registryRegistryNameRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
