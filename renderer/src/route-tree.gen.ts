/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as ShutdownRouteImport } from "./routes/shutdown"
import { Route as SettingsRouteImport } from "./routes/settings"
import { Route as SecretsRouteImport } from "./routes/secrets"
import { Route as PlaygroundRouteImport } from "./routes/playground"
import { Route as GroupGroupNameRouteImport } from "./routes/group.$groupName"
import { Route as CustomizeToolsServerNameRouteImport } from "./routes/customize-tools.$serverName"
import { Route as registryRegistryRouteImport } from "./routes/(registry)/registry"
import { Route as LogsGroupNameServerNameRouteImport } from "./routes/logs.$groupName.$serverName"
import { Route as registryRegistryNameRouteImport } from "./routes/(registry)/registry_.$name"

const ShutdownRoute = ShutdownRouteImport.update({
  id: "/shutdown",
  path: "/shutdown",
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRouteImport,
} as any)
const SecretsRoute = SecretsRouteImport.update({
  id: "/secrets",
  path: "/secrets",
  getParentRoute: () => rootRouteImport,
} as any)
const PlaygroundRoute = PlaygroundRouteImport.update({
  id: "/playground",
  path: "/playground",
  getParentRoute: () => rootRouteImport,
} as any)
const GroupGroupNameRoute = GroupGroupNameRouteImport.update({
  id: "/group/$groupName",
  path: "/group/$groupName",
  getParentRoute: () => rootRouteImport,
} as any)
const CustomizeToolsServerNameRoute =
  CustomizeToolsServerNameRouteImport.update({
    id: "/customize-tools/$serverName",
    path: "/customize-tools/$serverName",
    getParentRoute: () => rootRouteImport,
  } as any)
const registryRegistryRoute = registryRegistryRouteImport.update({
  id: "/(registry)/registry",
  path: "/registry",
  getParentRoute: () => rootRouteImport,
} as any)
const LogsGroupNameServerNameRoute = LogsGroupNameServerNameRouteImport.update({
  id: "/logs/$groupName/$serverName",
  path: "/logs/$groupName/$serverName",
  getParentRoute: () => rootRouteImport,
} as any)
const registryRegistryNameRoute = registryRegistryNameRouteImport.update({
  id: "/(registry)/registry_/$name",
  path: "/registry/$name",
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/playground": typeof PlaygroundRoute
  "/secrets": typeof SecretsRoute
  "/settings": typeof SettingsRoute
  "/shutdown": typeof ShutdownRoute
  "/registry": typeof registryRegistryRoute
  "/customize-tools/$serverName": typeof CustomizeToolsServerNameRoute
  "/group/$groupName": typeof GroupGroupNameRoute
  "/registry/$name": typeof registryRegistryNameRoute
  "/logs/$groupName/$serverName": typeof LogsGroupNameServerNameRoute
}
export interface FileRoutesByTo {
  "/playground": typeof PlaygroundRoute
  "/secrets": typeof SecretsRoute
  "/settings": typeof SettingsRoute
  "/shutdown": typeof ShutdownRoute
  "/registry": typeof registryRegistryRoute
  "/customize-tools/$serverName": typeof CustomizeToolsServerNameRoute
  "/group/$groupName": typeof GroupGroupNameRoute
  "/registry/$name": typeof registryRegistryNameRoute
  "/logs/$groupName/$serverName": typeof LogsGroupNameServerNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/playground": typeof PlaygroundRoute
  "/secrets": typeof SecretsRoute
  "/settings": typeof SettingsRoute
  "/shutdown": typeof ShutdownRoute
  "/(registry)/registry": typeof registryRegistryRoute
  "/customize-tools/$serverName": typeof CustomizeToolsServerNameRoute
  "/group/$groupName": typeof GroupGroupNameRoute
  "/(registry)/registry_/$name": typeof registryRegistryNameRoute
  "/logs/$groupName/$serverName": typeof LogsGroupNameServerNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/playground"
    | "/secrets"
    | "/settings"
    | "/shutdown"
    | "/registry"
    | "/customize-tools/$serverName"
    | "/group/$groupName"
    | "/registry/$name"
    | "/logs/$groupName/$serverName"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/playground"
    | "/secrets"
    | "/settings"
    | "/shutdown"
    | "/registry"
    | "/customize-tools/$serverName"
    | "/group/$groupName"
    | "/registry/$name"
    | "/logs/$groupName/$serverName"
  id:
    | "__root__"
    | "/playground"
    | "/secrets"
    | "/settings"
    | "/shutdown"
    | "/(registry)/registry"
    | "/customize-tools/$serverName"
    | "/group/$groupName"
    | "/(registry)/registry_/$name"
    | "/logs/$groupName/$serverName"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PlaygroundRoute: typeof PlaygroundRoute
  SecretsRoute: typeof SecretsRoute
  SettingsRoute: typeof SettingsRoute
  ShutdownRoute: typeof ShutdownRoute
  registryRegistryRoute: typeof registryRegistryRoute
  CustomizeToolsServerNameRoute: typeof CustomizeToolsServerNameRoute
  GroupGroupNameRoute: typeof GroupGroupNameRoute
  registryRegistryNameRoute: typeof registryRegistryNameRoute
  LogsGroupNameServerNameRoute: typeof LogsGroupNameServerNameRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/shutdown": {
      id: "/shutdown"
      path: "/shutdown"
      fullPath: "/shutdown"
      preLoaderRoute: typeof ShutdownRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/settings": {
      id: "/settings"
      path: "/settings"
      fullPath: "/settings"
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/secrets": {
      id: "/secrets"
      path: "/secrets"
      fullPath: "/secrets"
      preLoaderRoute: typeof SecretsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/playground": {
      id: "/playground"
      path: "/playground"
      fullPath: "/playground"
      preLoaderRoute: typeof PlaygroundRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/group/$groupName": {
      id: "/group/$groupName"
      path: "/group/$groupName"
      fullPath: "/group/$groupName"
      preLoaderRoute: typeof GroupGroupNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/customize-tools/$serverName": {
      id: "/customize-tools/$serverName"
      path: "/customize-tools/$serverName"
      fullPath: "/customize-tools/$serverName"
      preLoaderRoute: typeof CustomizeToolsServerNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/(registry)/registry": {
      id: "/(registry)/registry"
      path: "/registry"
      fullPath: "/registry"
      preLoaderRoute: typeof registryRegistryRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/logs/$groupName/$serverName": {
      id: "/logs/$groupName/$serverName"
      path: "/logs/$groupName/$serverName"
      fullPath: "/logs/$groupName/$serverName"
      preLoaderRoute: typeof LogsGroupNameServerNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/(registry)/registry_/$name": {
      id: "/(registry)/registry_/$name"
      path: "/registry/$name"
      fullPath: "/registry/$name"
      preLoaderRoute: typeof registryRegistryNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  PlaygroundRoute: PlaygroundRoute,
  SecretsRoute: SecretsRoute,
  SettingsRoute: SettingsRoute,
  ShutdownRoute: ShutdownRoute,
  registryRegistryRoute: registryRegistryRoute,
  CustomizeToolsServerNameRoute: CustomizeToolsServerNameRoute,
  GroupGroupNameRoute: GroupGroupNameRoute,
  registryRegistryNameRoute: registryRegistryNameRoute,
  LogsGroupNameServerNameRoute: LogsGroupNameServerNameRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
