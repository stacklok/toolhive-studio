// This file generates fallback mocks automatically to avoid
// having to create all mocks manually. You can still manually write
// mock handlers that override the behavior of these
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck

import openapi from '../../../../api/openapi.json'
import Ajv from 'ajv'
import addFormats from 'ajv-formats'
import fs from 'fs'
import { JSONSchemaFaker as jsf } from 'json-schema-faker'
import { http, HttpResponse } from 'msw'
import path from 'path'
import { fileURLToPath } from 'url'

const ajv = new Ajv({ strict: true })

ajv.addFormat('int64', { validate: () => true })
addFormats(ajv)

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const FOLDER_PATH = __dirname
const FIXTURES_PATH = `${FOLDER_PATH}/fixtures`

// Make the generated data more usable without manual changes
jsf.option({ alwaysFakeOptionals: true })
jsf.option({ sortProperties: true })
jsf.option({ fillProperties: true })
jsf.option({ minItems: 2 })
jsf.option({ maxItems: 5 })
jsf.option({ failOnInvalidTypes: false })
jsf.option({ failOnInvalidFormat: false })

// I think this is actually a bug in the schema
jsf.format('int64', () => null)

const autoGeneratedMockData = jsf.generate(openapi)

function autoGenerateHandlers() {
  const result = []
  const paths = Object.entries(autoGeneratedMockData['paths'])

  for (const [path, methods] of paths) {
    for (const [method, operation] of Object.entries(methods)) {
      const moreGenericPath = path
        .replace('/api/', '*/')
        .replaceAll(/{.*}/g, '*')

      result.push(
        http[method](moreGenericPath, () => {
          const fixtureFileName = `${FIXTURES_PATH}/${operation.operationId}.200.json`

          console.log(
            `Handling ${method.toUpperCase()} '${moreGenericPath}' using ${fixtureFileName}`
          )
          if (!fs.existsSync(fixtureFileName)) {
            fs.writeFileSync(
              fixtureFileName,
              JSON.stringify(
                jsf.generate(operation.responses['200'].schema),
                null,
                2
              )
            )
          }
          const data = JSON.parse(fs.readFileSync(fixtureFileName))
          const schema = openapi.paths[path][method].responses['200'].schema
          const isValid = ajv.validate(schema, data)
          if (!isValid) {
            console.error('Invalid mock response', {
              fixtureFileName,
              errors: ajv.errors,
            })
            throw new Error(isValid.errors)
          }

          return HttpResponse.json(data)
        })
      )
    }
  }

  return result
}

export const autoGeneratedHandlers = autoGenerateHandlers()
