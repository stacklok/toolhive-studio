name: Release
on:
  release:
    types: [published]

permissions:
  contents: write # Required for GitHub publisher to upload release assets

jobs:
  security:
    name: Security Checks
    uses: ./.github/workflows/_security-checks.yml

  static-checks:
    name: Static Checks
    uses: ./.github/workflows/_static-checks.yml
    secrets: inherit

  unit-tests:
    name: Unit Tests
    uses: ./.github/workflows/_unit-tests.yml
    secrets: inherit

  build-and-release:
    name: Build and Release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [security, static-checks, unit-tests]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: windows-latest
            arch: x64
          - os: macos-13
            arch: x64
          - os: macos-latest
            arch: arm64
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Update version from tag
        shell: bash
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          VERSION=${GITHUB_REF#refs/tags/v}
          VERSION=${VERSION#v}
          echo "Setting version to: $VERSION"

          # Update package.json version
          npm version $VERSION --no-git-tag-version --allow-same-version 
          echo "Updated package.json version to $VERSION"

          # Set SENTRY_RELEASE for build and publish step
          echo "SENTRY_RELEASE=${VERSION}" >> $GITHUB_ENV

      - name: Setup macOS code signing
        uses: ./.github/actions/setup-macos-codesign
        if: runner.os == 'macOS'
        with:
          apple-certificate: ${{ secrets.APPLE_CERTIFICATE }}
          apple-certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          apple-api-key: ${{ secrets.APPLE_API_KEY }}

          apple-issuer-id: ${{ secrets.APPLE_ISSUER_ID }}
          apple-key-id: ${{ secrets.APPLE_KEY_ID }}

      - name: Setup DigiCert KeyLocker
        if: runner.os == 'Windows'
        run: |
          # Setup certificate
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
          
          # Set environment variables
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
          echo "SM_CODE_SIGNING_CERT_SHA1_HASH=${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}" >> "$GITHUB_ENV"
          
          # Add Windows SDK tools to PATH for signtool
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          
          # Download and install DigiCert KeyLocker tools
          curl -X GET https://one.digicert.com/signingmanager/api-ui/v1/releases/Keylockertools-windows-x64.msi/download -H "x-api-key:${{ secrets.SM_API_KEY }}" -o Keylockertools-windows-x64.msi
          msiexec /i Keylockertools-windows-x64.msi /quiet /qn
          
          # Register the KSP
          smksp_registrar.exe register
          
          # Synchronize certificates
          smksp_cert_sync.exe
        shell: bash

      - name: Install Flatpak tool-chain (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # flatpak itself isn’t strictly required to *build*, but it’s good to have.
          sudo apt-get install -y --no-install-recommends \
               flatpak flatpak-builder elfutils
          flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo

      - name: Build and Publish to GitHub Release
        run: pnpm run publish
        env:
          # Ensure the correct Node.js version is used for native modules
          npm_config_target_platform: ${{ runner.os == 'Linux' && 'linux' || (runner.os == 'macOS' && 'darwin' || 'win32') }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
          SENTRY_RELEASE: ${{ env.SENTRY_RELEASE }}
          # Apple API Key method for notarization (set by composite action)
          APPLE_API_KEY: ${{ env.APPLE_API_KEY_PATH }}
          APPLE_ISSUER_ID: ${{ env.APPLE_ISSUER_ID }}
          APPLE_KEY_ID: ${{ env.APPLE_KEY_ID }}
