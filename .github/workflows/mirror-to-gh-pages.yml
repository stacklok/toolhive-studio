name: Mirror latest release to GitHub Pages

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to mirror (e.g., v0.4.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
      - name: Get release info
        id: release
        run: |
          # Get tag from either workflow_call or workflow_dispatch input
          TAG="${{ inputs.tag }}"
          echo "Processing release tag: $TAG"

          # Get release metadata from API
          RELEASE_DATA=$(gh api "repos/${{ github.repository }}/releases/tags/$TAG")
          echo "prerelease=$(echo "$RELEASE_DATA" | jq -r '.prerelease')" >> "$GITHUB_OUTPUT"
          echo "published_at=$(echo "$RELEASE_DATA" | jq -r '.published_at // .created_at')" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate manifest from GitHub Releases
        run: |
          TAG="${{ steps.release.outputs.tag }}"
          BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/$TAG"
          TIMESTAMP=$(date +%s)

          # Skip prereleases to only mirror stable releases
          if [[ "${{ steps.release.outputs.prerelease }}" == "true" ]]; then
            echo "Skipping prerelease $TAG"
            exit 0
          fi

          # Create directory for manifest
          mkdir -p "latest"
          cd "latest"

          # Get release metadata from GitHub API
          RELEASE_DATA=$(gh api "repos/${{ github.repository }}/releases/tags/$TAG")

          # Create manifest pointing to GitHub Releases
          jq -n \
            --arg tag "$TAG" \
            --arg published_at "${{ steps.release.outputs.published_at }}" \
            --argjson prerelease ${{ steps.release.outputs.prerelease }} \
            --arg base_url "$BASE_URL" \
            --arg timestamp "$TIMESTAMP" \
            '
            {
              tag: $tag,
              prerelease: $prerelease,
              published_at: $published_at,
              base_url: $base_url,
              assets: []
            }
            ' > index.json

          # Add asset info to manifest and create redirect pages
          echo "$RELEASE_DATA" | jq -r '.assets[] | @json' | while read -r asset; do
            NAME=$(echo "$asset" | jq -r '.name')
            SIZE=$(echo "$asset" | jq -r '.size')
            DOWNLOAD_URL=$(echo "$asset" | jq -r '.browser_download_url')
            
            echo "Adding asset: $NAME (${SIZE} bytes) -> $DOWNLOAD_URL"
            
            # Add to manifest with direct GitHub Releases URL
            jq --arg name "$NAME" \
               --arg url "$DOWNLOAD_URL" \
               --argjson size "$SIZE" \
               '.assets += [{name: $name, url: $url, size: $size}]' \
               index.json > tmp.json && mv tmp.json index.json
          done

          # Go back to parent to create 404.html that handles file redirects
          cd ..
          printf '%s\n' '<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><title>Redirecting...</title><script>(function(){var p=window.location.pathname;var m=p.match(/\/latest\/(.+)$/);if(m&&m[1]){var f=m[1];var t="'"$TAG"'";var r="'"${{ github.repository }}"'";var u="https://github.com/"+r+"/releases/download/"+t+"/"+f;window.location.replace(u);}else{document.body.innerHTML="<h1>404 - Not Found</h1>";}})();</script></head><body><p>Redirecting...</p></body></html>' > 404.html
          cd latest

          echo "Generated manifest with $(jq '.assets | length' index.json) assets"
          echo "Manifest content:"
          cat index.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          keep_files: false
          commit_message: 'Update latest release to ${{ steps.release.outputs.tag }}'
