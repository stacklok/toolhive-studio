// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getApiOpenapiJson,
  getApiV1BetaClients,
  postApiV1BetaClients,
  postApiV1BetaClientsRegister,
  postApiV1BetaClientsUnregister,
  deleteApiV1BetaClientsByName,
  getApiV1BetaDiscoveryClients,
  getApiV1BetaRegistry,
  postApiV1BetaRegistry,
  deleteApiV1BetaRegistryByName,
  getApiV1BetaRegistryByName,
  getApiV1BetaRegistryByNameServers,
  getApiV1BetaRegistryByNameServersByServerName,
  postApiV1BetaSecrets,
  getApiV1BetaSecretsDefault,
  getApiV1BetaSecretsDefaultKeys,
  postApiV1BetaSecretsDefaultKeys,
  deleteApiV1BetaSecretsDefaultKeysByKey,
  putApiV1BetaSecretsDefaultKeysByKey,
  getApiV1BetaVersion,
  getApiV1BetaWorkloads,
  postApiV1BetaWorkloads,
  postApiV1BetaWorkloadsDelete,
  postApiV1BetaWorkloadsRestart,
  postApiV1BetaWorkloadsStop,
  deleteApiV1BetaWorkloadsByName,
  getApiV1BetaWorkloadsByName,
  getApiV1BetaWorkloadsByNameLogs,
  postApiV1BetaWorkloadsByNameRestart,
  postApiV1BetaWorkloadsByNameStop,
  getHealth,
} from '../sdk.gen'
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query'
import type {
  GetApiOpenapiJsonData,
  GetApiV1BetaClientsData,
  PostApiV1BetaClientsData,
  PostApiV1BetaClientsError,
  PostApiV1BetaClientsResponse,
  PostApiV1BetaClientsRegisterData,
  PostApiV1BetaClientsRegisterError,
  PostApiV1BetaClientsRegisterResponse,
  PostApiV1BetaClientsUnregisterData,
  PostApiV1BetaClientsUnregisterError,
  PostApiV1BetaClientsUnregisterResponse,
  DeleteApiV1BetaClientsByNameData,
  DeleteApiV1BetaClientsByNameError,
  DeleteApiV1BetaClientsByNameResponse,
  GetApiV1BetaDiscoveryClientsData,
  GetApiV1BetaRegistryData,
  PostApiV1BetaRegistryData,
  PostApiV1BetaRegistryError,
  DeleteApiV1BetaRegistryByNameData,
  DeleteApiV1BetaRegistryByNameError,
  DeleteApiV1BetaRegistryByNameResponse,
  GetApiV1BetaRegistryByNameData,
  GetApiV1BetaRegistryByNameServersData,
  GetApiV1BetaRegistryByNameServersByServerNameData,
  PostApiV1BetaSecretsData,
  PostApiV1BetaSecretsError,
  PostApiV1BetaSecretsResponse,
  GetApiV1BetaSecretsDefaultData,
  GetApiV1BetaSecretsDefaultKeysData,
  PostApiV1BetaSecretsDefaultKeysData,
  PostApiV1BetaSecretsDefaultKeysError,
  PostApiV1BetaSecretsDefaultKeysResponse,
  DeleteApiV1BetaSecretsDefaultKeysByKeyData,
  DeleteApiV1BetaSecretsDefaultKeysByKeyError,
  DeleteApiV1BetaSecretsDefaultKeysByKeyResponse,
  PutApiV1BetaSecretsDefaultKeysByKeyData,
  PutApiV1BetaSecretsDefaultKeysByKeyError,
  PutApiV1BetaSecretsDefaultKeysByKeyResponse,
  GetApiV1BetaVersionData,
  GetApiV1BetaWorkloadsData,
  PostApiV1BetaWorkloadsData,
  PostApiV1BetaWorkloadsError,
  PostApiV1BetaWorkloadsResponse,
  PostApiV1BetaWorkloadsDeleteData,
  PostApiV1BetaWorkloadsDeleteError,
  PostApiV1BetaWorkloadsDeleteResponse,
  PostApiV1BetaWorkloadsRestartData,
  PostApiV1BetaWorkloadsRestartError,
  PostApiV1BetaWorkloadsRestartResponse,
  PostApiV1BetaWorkloadsStopData,
  PostApiV1BetaWorkloadsStopError,
  PostApiV1BetaWorkloadsStopResponse,
  DeleteApiV1BetaWorkloadsByNameData,
  DeleteApiV1BetaWorkloadsByNameError,
  DeleteApiV1BetaWorkloadsByNameResponse,
  GetApiV1BetaWorkloadsByNameData,
  GetApiV1BetaWorkloadsByNameLogsData,
  PostApiV1BetaWorkloadsByNameRestartData,
  PostApiV1BetaWorkloadsByNameRestartError,
  PostApiV1BetaWorkloadsByNameRestartResponse,
  PostApiV1BetaWorkloadsByNameStopData,
  PostApiV1BetaWorkloadsByNameStopError,
  PostApiV1BetaWorkloadsByNameStopResponse,
  GetHealthData,
} from '../types.gen'
import { client as _heyApiClient } from '../client.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const getApiOpenapiJsonQueryKey = (
  options?: Options<GetApiOpenapiJsonData>
) => createQueryKey('getApiOpenapiJson', options)

/**
 * Get OpenAPI specification
 * Returns the OpenAPI specification for the API
 */
export const getApiOpenapiJsonOptions = (
  options?: Options<GetApiOpenapiJsonData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOpenapiJson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiOpenapiJsonQueryKey(options),
  })
}

export const getApiV1BetaClientsQueryKey = (
  options?: Options<GetApiV1BetaClientsData>
) => createQueryKey('getApiV1BetaClients', options)

/**
 * List all clients
 * List all registered clients in ToolHive
 */
export const getApiV1BetaClientsOptions = (
  options?: Options<GetApiV1BetaClientsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaClientsQueryKey(options),
  })
}

export const postApiV1BetaClientsQueryKey = (
  options: Options<PostApiV1BetaClientsData>
) => createQueryKey('postApiV1BetaClients', options)

/**
 * Register a new client
 * Register a new client with ToolHive
 */
export const postApiV1BetaClientsOptions = (
  options: Options<PostApiV1BetaClientsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaClientsQueryKey(options),
  })
}

/**
 * Register a new client
 * Register a new client with ToolHive
 */
export const postApiV1BetaClientsMutation = (
  options?: Partial<Options<PostApiV1BetaClientsData>>
): UseMutationOptions<
  PostApiV1BetaClientsResponse,
  PostApiV1BetaClientsError,
  Options<PostApiV1BetaClientsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaClientsResponse,
    PostApiV1BetaClientsError,
    Options<PostApiV1BetaClientsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaClients({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const postApiV1BetaClientsRegisterQueryKey = (
  options: Options<PostApiV1BetaClientsRegisterData>
) => createQueryKey('postApiV1BetaClientsRegister', options)

/**
 * Register multiple clients
 * Register multiple clients with ToolHive
 */
export const postApiV1BetaClientsRegisterOptions = (
  options: Options<PostApiV1BetaClientsRegisterData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaClientsRegister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaClientsRegisterQueryKey(options),
  })
}

/**
 * Register multiple clients
 * Register multiple clients with ToolHive
 */
export const postApiV1BetaClientsRegisterMutation = (
  options?: Partial<Options<PostApiV1BetaClientsRegisterData>>
): UseMutationOptions<
  PostApiV1BetaClientsRegisterResponse,
  PostApiV1BetaClientsRegisterError,
  Options<PostApiV1BetaClientsRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaClientsRegisterResponse,
    PostApiV1BetaClientsRegisterError,
    Options<PostApiV1BetaClientsRegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaClientsRegister({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const postApiV1BetaClientsUnregisterQueryKey = (
  options: Options<PostApiV1BetaClientsUnregisterData>
) => createQueryKey('postApiV1BetaClientsUnregister', options)

/**
 * Unregister multiple clients
 * Unregister multiple clients from ToolHive
 */
export const postApiV1BetaClientsUnregisterOptions = (
  options: Options<PostApiV1BetaClientsUnregisterData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaClientsUnregister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaClientsUnregisterQueryKey(options),
  })
}

/**
 * Unregister multiple clients
 * Unregister multiple clients from ToolHive
 */
export const postApiV1BetaClientsUnregisterMutation = (
  options?: Partial<Options<PostApiV1BetaClientsUnregisterData>>
): UseMutationOptions<
  PostApiV1BetaClientsUnregisterResponse,
  PostApiV1BetaClientsUnregisterError,
  Options<PostApiV1BetaClientsUnregisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaClientsUnregisterResponse,
    PostApiV1BetaClientsUnregisterError,
    Options<PostApiV1BetaClientsUnregisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaClientsUnregister({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Unregister a client
 * Unregister a client from ToolHive
 */
export const deleteApiV1BetaClientsByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaClientsByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaClientsByNameResponse,
  DeleteApiV1BetaClientsByNameError,
  Options<DeleteApiV1BetaClientsByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaClientsByNameResponse,
    DeleteApiV1BetaClientsByNameError,
    Options<DeleteApiV1BetaClientsByNameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiV1BetaClientsByName({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaDiscoveryClientsQueryKey = (
  options?: Options<GetApiV1BetaDiscoveryClientsData>
) => createQueryKey('getApiV1BetaDiscoveryClients', options)

/**
 * List all clients status
 * List all clients compatible with ToolHive and their status
 */
export const getApiV1BetaDiscoveryClientsOptions = (
  options?: Options<GetApiV1BetaDiscoveryClientsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaDiscoveryClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaDiscoveryClientsQueryKey(options),
  })
}

export const getApiV1BetaRegistryQueryKey = (
  options?: Options<GetApiV1BetaRegistryData>
) => createQueryKey('getApiV1BetaRegistry', options)

/**
 * List registries
 * Get a list of the current registries
 */
export const getApiV1BetaRegistryOptions = (
  options?: Options<GetApiV1BetaRegistryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryQueryKey(options),
  })
}

export const postApiV1BetaRegistryQueryKey = (
  options?: Options<PostApiV1BetaRegistryData>
) => createQueryKey('postApiV1BetaRegistry', options)

/**
 * Add a registry
 * Add a new registry
 */
export const postApiV1BetaRegistryOptions = (
  options?: Options<PostApiV1BetaRegistryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaRegistry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaRegistryQueryKey(options),
  })
}

/**
 * Add a registry
 * Add a new registry
 */
export const postApiV1BetaRegistryMutation = (
  options?: Partial<Options<PostApiV1BetaRegistryData>>
): UseMutationOptions<
  unknown,
  PostApiV1BetaRegistryError,
  Options<PostApiV1BetaRegistryData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiV1BetaRegistryError,
    Options<PostApiV1BetaRegistryData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaRegistry({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Remove a registry
 * Remove a specific registry
 */
export const deleteApiV1BetaRegistryByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaRegistryByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaRegistryByNameResponse,
  DeleteApiV1BetaRegistryByNameError,
  Options<DeleteApiV1BetaRegistryByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaRegistryByNameResponse,
    DeleteApiV1BetaRegistryByNameError,
    Options<DeleteApiV1BetaRegistryByNameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiV1BetaRegistryByName({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaRegistryByNameQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameData>
) => createQueryKey('getApiV1BetaRegistryByName', options)

/**
 * Get a registry
 * Get details of a specific registry
 */
export const getApiV1BetaRegistryByNameOptions = (
  options: Options<GetApiV1BetaRegistryByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameQueryKey(options),
  })
}

export const getApiV1BetaRegistryByNameServersQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameServersData>
) => createQueryKey('getApiV1BetaRegistryByNameServers', options)

/**
 * List servers in a registry
 * Get a list of servers in a specific registry
 */
export const getApiV1BetaRegistryByNameServersOptions = (
  options: Options<GetApiV1BetaRegistryByNameServersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByNameServers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameServersQueryKey(options),
  })
}

export const getApiV1BetaRegistryByNameServersByServerNameQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameServersByServerNameData>
) => createQueryKey('getApiV1BetaRegistryByNameServersByServerName', options)

/**
 * Get a server from a registry
 * Get details of a specific server in a registry
 */
export const getApiV1BetaRegistryByNameServersByServerNameOptions = (
  options: Options<GetApiV1BetaRegistryByNameServersByServerNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByNameServersByServerName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameServersByServerNameQueryKey(options),
  })
}

export const postApiV1BetaSecretsQueryKey = (
  options: Options<PostApiV1BetaSecretsData>
) => createQueryKey('postApiV1BetaSecrets', options)

/**
 * Setup or reconfigure secrets provider
 * Setup the secrets provider with the specified type and configuration.
 */
export const postApiV1BetaSecretsOptions = (
  options: Options<PostApiV1BetaSecretsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaSecrets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaSecretsQueryKey(options),
  })
}

/**
 * Setup or reconfigure secrets provider
 * Setup the secrets provider with the specified type and configuration.
 */
export const postApiV1BetaSecretsMutation = (
  options?: Partial<Options<PostApiV1BetaSecretsData>>
): UseMutationOptions<
  PostApiV1BetaSecretsResponse,
  PostApiV1BetaSecretsError,
  Options<PostApiV1BetaSecretsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaSecretsResponse,
    PostApiV1BetaSecretsError,
    Options<PostApiV1BetaSecretsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaSecrets({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaSecretsDefaultQueryKey = (
  options?: Options<GetApiV1BetaSecretsDefaultData>
) => createQueryKey('getApiV1BetaSecretsDefault', options)

/**
 * Get secrets provider details
 * Get details of the default secrets provider
 */
export const getApiV1BetaSecretsDefaultOptions = (
  options?: Options<GetApiV1BetaSecretsDefaultData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaSecretsDefault({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaSecretsDefaultQueryKey(options),
  })
}

export const getApiV1BetaSecretsDefaultKeysQueryKey = (
  options?: Options<GetApiV1BetaSecretsDefaultKeysData>
) => createQueryKey('getApiV1BetaSecretsDefaultKeys', options)

/**
 * List secrets
 * Get a list of all secret keys from the default provider
 */
export const getApiV1BetaSecretsDefaultKeysOptions = (
  options?: Options<GetApiV1BetaSecretsDefaultKeysData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaSecretsDefaultKeys({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaSecretsDefaultKeysQueryKey(options),
  })
}

export const postApiV1BetaSecretsDefaultKeysQueryKey = (
  options: Options<PostApiV1BetaSecretsDefaultKeysData>
) => createQueryKey('postApiV1BetaSecretsDefaultKeys', options)

/**
 * Create a new secret
 * Create a new secret in the default provider (encrypted provider only)
 */
export const postApiV1BetaSecretsDefaultKeysOptions = (
  options: Options<PostApiV1BetaSecretsDefaultKeysData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaSecretsDefaultKeys({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaSecretsDefaultKeysQueryKey(options),
  })
}

/**
 * Create a new secret
 * Create a new secret in the default provider (encrypted provider only)
 */
export const postApiV1BetaSecretsDefaultKeysMutation = (
  options?: Partial<Options<PostApiV1BetaSecretsDefaultKeysData>>
): UseMutationOptions<
  PostApiV1BetaSecretsDefaultKeysResponse,
  PostApiV1BetaSecretsDefaultKeysError,
  Options<PostApiV1BetaSecretsDefaultKeysData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaSecretsDefaultKeysResponse,
    PostApiV1BetaSecretsDefaultKeysError,
    Options<PostApiV1BetaSecretsDefaultKeysData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaSecretsDefaultKeys({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete a secret
 * Delete a secret from the default provider (encrypted provider only)
 */
export const deleteApiV1BetaSecretsDefaultKeysByKeyMutation = (
  options?: Partial<Options<DeleteApiV1BetaSecretsDefaultKeysByKeyData>>
): UseMutationOptions<
  DeleteApiV1BetaSecretsDefaultKeysByKeyResponse,
  DeleteApiV1BetaSecretsDefaultKeysByKeyError,
  Options<DeleteApiV1BetaSecretsDefaultKeysByKeyData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaSecretsDefaultKeysByKeyResponse,
    DeleteApiV1BetaSecretsDefaultKeysByKeyError,
    Options<DeleteApiV1BetaSecretsDefaultKeysByKeyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiV1BetaSecretsDefaultKeysByKey({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Update a secret
 * Update an existing secret in the default provider (encrypted provider only)
 */
export const putApiV1BetaSecretsDefaultKeysByKeyMutation = (
  options?: Partial<Options<PutApiV1BetaSecretsDefaultKeysByKeyData>>
): UseMutationOptions<
  PutApiV1BetaSecretsDefaultKeysByKeyResponse,
  PutApiV1BetaSecretsDefaultKeysByKeyError,
  Options<PutApiV1BetaSecretsDefaultKeysByKeyData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiV1BetaSecretsDefaultKeysByKeyResponse,
    PutApiV1BetaSecretsDefaultKeysByKeyError,
    Options<PutApiV1BetaSecretsDefaultKeysByKeyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiV1BetaSecretsDefaultKeysByKey({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaVersionQueryKey = (
  options?: Options<GetApiV1BetaVersionData>
) => createQueryKey('getApiV1BetaVersion', options)

/**
 * Get server version
 * Returns the current version of the server
 */
export const getApiV1BetaVersionOptions = (
  options?: Options<GetApiV1BetaVersionData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaVersion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaVersionQueryKey(options),
  })
}

export const getApiV1BetaWorkloadsQueryKey = (
  options?: Options<GetApiV1BetaWorkloadsData>
) => createQueryKey('getApiV1BetaWorkloads', options)

/**
 * List all workloads
 * Get a list of all running workloads
 */
export const getApiV1BetaWorkloadsOptions = (
  options?: Options<GetApiV1BetaWorkloadsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloads({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsQueryKey(options),
  })
}

export const postApiV1BetaWorkloadsQueryKey = (
  options: Options<PostApiV1BetaWorkloadsData>
) => createQueryKey('postApiV1BetaWorkloads', options)

/**
 * Create a new workload
 * Create and start a new workload
 */
export const postApiV1BetaWorkloadsOptions = (
  options: Options<PostApiV1BetaWorkloadsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaWorkloads({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaWorkloadsQueryKey(options),
  })
}

/**
 * Create a new workload
 * Create and start a new workload
 */
export const postApiV1BetaWorkloadsMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsResponse,
  PostApiV1BetaWorkloadsError,
  Options<PostApiV1BetaWorkloadsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsResponse,
    PostApiV1BetaWorkloadsError,
    Options<PostApiV1BetaWorkloadsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaWorkloads({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const postApiV1BetaWorkloadsDeleteQueryKey = (
  options: Options<PostApiV1BetaWorkloadsDeleteData>
) => createQueryKey('postApiV1BetaWorkloadsDelete', options)

/**
 * Delete workloads in bulk
 * Delete multiple workloads by name
 */
export const postApiV1BetaWorkloadsDeleteOptions = (
  options: Options<PostApiV1BetaWorkloadsDeleteData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaWorkloadsDelete({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaWorkloadsDeleteQueryKey(options),
  })
}

/**
 * Delete workloads in bulk
 * Delete multiple workloads by name
 */
export const postApiV1BetaWorkloadsDeleteMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsDeleteData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsDeleteResponse,
  PostApiV1BetaWorkloadsDeleteError,
  Options<PostApiV1BetaWorkloadsDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsDeleteResponse,
    PostApiV1BetaWorkloadsDeleteError,
    Options<PostApiV1BetaWorkloadsDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaWorkloadsDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const postApiV1BetaWorkloadsRestartQueryKey = (
  options: Options<PostApiV1BetaWorkloadsRestartData>
) => createQueryKey('postApiV1BetaWorkloadsRestart', options)

/**
 * Restart workloads in bulk
 * Restart multiple workloads by name
 */
export const postApiV1BetaWorkloadsRestartOptions = (
  options: Options<PostApiV1BetaWorkloadsRestartData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaWorkloadsRestart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaWorkloadsRestartQueryKey(options),
  })
}

/**
 * Restart workloads in bulk
 * Restart multiple workloads by name
 */
export const postApiV1BetaWorkloadsRestartMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsRestartData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsRestartResponse,
  PostApiV1BetaWorkloadsRestartError,
  Options<PostApiV1BetaWorkloadsRestartData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsRestartResponse,
    PostApiV1BetaWorkloadsRestartError,
    Options<PostApiV1BetaWorkloadsRestartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaWorkloadsRestart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const postApiV1BetaWorkloadsStopQueryKey = (
  options: Options<PostApiV1BetaWorkloadsStopData>
) => createQueryKey('postApiV1BetaWorkloadsStop', options)

/**
 * Stop workloads in bulk
 * Stop multiple workloads by name
 */
export const postApiV1BetaWorkloadsStopOptions = (
  options: Options<PostApiV1BetaWorkloadsStopData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaWorkloadsStop({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaWorkloadsStopQueryKey(options),
  })
}

/**
 * Stop workloads in bulk
 * Stop multiple workloads by name
 */
export const postApiV1BetaWorkloadsStopMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsStopData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsStopResponse,
  PostApiV1BetaWorkloadsStopError,
  Options<PostApiV1BetaWorkloadsStopData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsStopResponse,
    PostApiV1BetaWorkloadsStopError,
    Options<PostApiV1BetaWorkloadsStopData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaWorkloadsStop({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete a workload
 * Delete a workload
 */
export const deleteApiV1BetaWorkloadsByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaWorkloadsByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaWorkloadsByNameResponse,
  DeleteApiV1BetaWorkloadsByNameError,
  Options<DeleteApiV1BetaWorkloadsByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaWorkloadsByNameResponse,
    DeleteApiV1BetaWorkloadsByNameError,
    Options<DeleteApiV1BetaWorkloadsByNameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiV1BetaWorkloadsByName({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaWorkloadsByNameQueryKey = (
  options: Options<GetApiV1BetaWorkloadsByNameData>
) => createQueryKey('getApiV1BetaWorkloadsByName', options)

/**
 * Get workload details
 * Get details of a specific workload
 */
export const getApiV1BetaWorkloadsByNameOptions = (
  options: Options<GetApiV1BetaWorkloadsByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloadsByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsByNameQueryKey(options),
  })
}

export const getApiV1BetaWorkloadsByNameLogsQueryKey = (
  options: Options<GetApiV1BetaWorkloadsByNameLogsData>
) => createQueryKey('getApiV1BetaWorkloadsByNameLogs', options)

/**
 * Get logs for a specific workload
 * Retrieve at most 100 lines of logs for a specific workload by name.
 */
export const getApiV1BetaWorkloadsByNameLogsOptions = (
  options: Options<GetApiV1BetaWorkloadsByNameLogsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloadsByNameLogs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsByNameLogsQueryKey(options),
  })
}

export const postApiV1BetaWorkloadsByNameRestartQueryKey = (
  options: Options<PostApiV1BetaWorkloadsByNameRestartData>
) => createQueryKey('postApiV1BetaWorkloadsByNameRestart', options)

/**
 * Restart a workload
 * Restart a running workload
 */
export const postApiV1BetaWorkloadsByNameRestartOptions = (
  options: Options<PostApiV1BetaWorkloadsByNameRestartData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaWorkloadsByNameRestart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaWorkloadsByNameRestartQueryKey(options),
  })
}

/**
 * Restart a workload
 * Restart a running workload
 */
export const postApiV1BetaWorkloadsByNameRestartMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsByNameRestartData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsByNameRestartResponse,
  PostApiV1BetaWorkloadsByNameRestartError,
  Options<PostApiV1BetaWorkloadsByNameRestartData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsByNameRestartResponse,
    PostApiV1BetaWorkloadsByNameRestartError,
    Options<PostApiV1BetaWorkloadsByNameRestartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaWorkloadsByNameRestart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const postApiV1BetaWorkloadsByNameStopQueryKey = (
  options: Options<PostApiV1BetaWorkloadsByNameStopData>
) => createQueryKey('postApiV1BetaWorkloadsByNameStop', options)

/**
 * Stop a workload
 * Stop a running workload
 */
export const postApiV1BetaWorkloadsByNameStopOptions = (
  options: Options<PostApiV1BetaWorkloadsByNameStopData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaWorkloadsByNameStop({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaWorkloadsByNameStopQueryKey(options),
  })
}

/**
 * Stop a workload
 * Stop a running workload
 */
export const postApiV1BetaWorkloadsByNameStopMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsByNameStopData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsByNameStopResponse,
  PostApiV1BetaWorkloadsByNameStopError,
  Options<PostApiV1BetaWorkloadsByNameStopData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsByNameStopResponse,
    PostApiV1BetaWorkloadsByNameStopError,
    Options<PostApiV1BetaWorkloadsByNameStopData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaWorkloadsByNameStop({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getHealthQueryKey = (options?: Options<GetHealthData>) =>
  createQueryKey('getHealth', options)

/**
 * Health check
 * Check if the API is healthy
 */
export const getHealthOptions = (options?: Options<GetHealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getHealthQueryKey(options),
  })
}
