// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query'

import { client } from '../client.gen'
import {
  deleteApiV1BetaClientsByName,
  deleteApiV1BetaClientsByNameGroupsByGroup,
  deleteApiV1BetaGroupsByName,
  deleteApiV1BetaRegistryByName,
  deleteApiV1BetaSecretsDefaultKeysByKey,
  deleteApiV1BetaWorkloadsByName,
  getApiOpenapiJson,
  getApiV1BetaClients,
  getApiV1BetaDiscoveryClients,
  getApiV1BetaGroups,
  getApiV1BetaGroupsByName,
  getApiV1BetaRegistry,
  getApiV1BetaRegistryByName,
  getApiV1BetaRegistryByNameServers,
  getApiV1BetaRegistryByNameServersByServerName,
  getApiV1BetaSecretsDefault,
  getApiV1BetaSecretsDefaultKeys,
  getApiV1BetaVersion,
  getApiV1BetaWorkloads,
  getApiV1BetaWorkloadsByName,
  getApiV1BetaWorkloadsByNameExport,
  getApiV1BetaWorkloadsByNameLogs,
  getApiV1BetaWorkloadsByNameStatus,
  getHealth,
  type Options,
  postApiV1BetaClients,
  postApiV1BetaClientsRegister,
  postApiV1BetaClientsUnregister,
  postApiV1BetaGroups,
  postApiV1BetaRegistry,
  postApiV1BetaSecrets,
  postApiV1BetaSecretsDefaultKeys,
  postApiV1BetaWorkloads,
  postApiV1BetaWorkloadsByNameEdit,
  postApiV1BetaWorkloadsByNameRestart,
  postApiV1BetaWorkloadsByNameStop,
  postApiV1BetaWorkloadsDelete,
  postApiV1BetaWorkloadsRestart,
  postApiV1BetaWorkloadsStop,
  putApiV1BetaRegistryByName,
  putApiV1BetaSecretsDefaultKeysByKey,
} from '../sdk.gen'
import type {
  DeleteApiV1BetaClientsByNameData,
  DeleteApiV1BetaClientsByNameError,
  DeleteApiV1BetaClientsByNameGroupsByGroupData,
  DeleteApiV1BetaClientsByNameGroupsByGroupError,
  DeleteApiV1BetaClientsByNameGroupsByGroupResponse,
  DeleteApiV1BetaClientsByNameResponse,
  DeleteApiV1BetaGroupsByNameData,
  DeleteApiV1BetaGroupsByNameError,
  DeleteApiV1BetaGroupsByNameResponse,
  DeleteApiV1BetaRegistryByNameData,
  DeleteApiV1BetaRegistryByNameError,
  DeleteApiV1BetaRegistryByNameResponse,
  DeleteApiV1BetaSecretsDefaultKeysByKeyData,
  DeleteApiV1BetaSecretsDefaultKeysByKeyError,
  DeleteApiV1BetaSecretsDefaultKeysByKeyResponse,
  DeleteApiV1BetaWorkloadsByNameData,
  DeleteApiV1BetaWorkloadsByNameError,
  DeleteApiV1BetaWorkloadsByNameResponse,
  GetApiOpenapiJsonData,
  GetApiV1BetaClientsData,
  GetApiV1BetaDiscoveryClientsData,
  GetApiV1BetaGroupsByNameData,
  GetApiV1BetaGroupsData,
  GetApiV1BetaRegistryByNameData,
  GetApiV1BetaRegistryByNameServersByServerNameData,
  GetApiV1BetaRegistryByNameServersData,
  GetApiV1BetaRegistryData,
  GetApiV1BetaSecretsDefaultData,
  GetApiV1BetaSecretsDefaultKeysData,
  GetApiV1BetaVersionData,
  GetApiV1BetaWorkloadsByNameData,
  GetApiV1BetaWorkloadsByNameExportData,
  GetApiV1BetaWorkloadsByNameLogsData,
  GetApiV1BetaWorkloadsByNameStatusData,
  GetApiV1BetaWorkloadsData,
  GetHealthData,
  PostApiV1BetaClientsData,
  PostApiV1BetaClientsError,
  PostApiV1BetaClientsRegisterData,
  PostApiV1BetaClientsRegisterError,
  PostApiV1BetaClientsRegisterResponse,
  PostApiV1BetaClientsResponse,
  PostApiV1BetaClientsUnregisterData,
  PostApiV1BetaClientsUnregisterError,
  PostApiV1BetaClientsUnregisterResponse,
  PostApiV1BetaGroupsData,
  PostApiV1BetaGroupsError,
  PostApiV1BetaGroupsResponse,
  PostApiV1BetaRegistryData,
  PostApiV1BetaRegistryError,
  PostApiV1BetaSecretsData,
  PostApiV1BetaSecretsDefaultKeysData,
  PostApiV1BetaSecretsDefaultKeysError,
  PostApiV1BetaSecretsDefaultKeysResponse,
  PostApiV1BetaSecretsError,
  PostApiV1BetaSecretsResponse,
  PostApiV1BetaWorkloadsByNameEditData,
  PostApiV1BetaWorkloadsByNameEditError,
  PostApiV1BetaWorkloadsByNameEditResponse,
  PostApiV1BetaWorkloadsByNameRestartData,
  PostApiV1BetaWorkloadsByNameRestartError,
  PostApiV1BetaWorkloadsByNameRestartResponse,
  PostApiV1BetaWorkloadsByNameStopData,
  PostApiV1BetaWorkloadsByNameStopError,
  PostApiV1BetaWorkloadsByNameStopResponse,
  PostApiV1BetaWorkloadsData,
  PostApiV1BetaWorkloadsDeleteData,
  PostApiV1BetaWorkloadsDeleteError,
  PostApiV1BetaWorkloadsDeleteResponse,
  PostApiV1BetaWorkloadsError,
  PostApiV1BetaWorkloadsResponse,
  PostApiV1BetaWorkloadsRestartData,
  PostApiV1BetaWorkloadsRestartError,
  PostApiV1BetaWorkloadsRestartResponse,
  PostApiV1BetaWorkloadsStopData,
  PostApiV1BetaWorkloadsStopError,
  PostApiV1BetaWorkloadsStopResponse,
  PutApiV1BetaRegistryByNameData,
  PutApiV1BetaRegistryByNameError,
  PutApiV1BetaRegistryByNameResponse,
  PutApiV1BetaSecretsDefaultKeysByKeyData,
  PutApiV1BetaSecretsDefaultKeysByKeyError,
  PutApiV1BetaSecretsDefaultKeysByKeyResponse,
} from '../types.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
    tags?: ReadonlyArray<string>
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (tags) {
    params.tags = tags
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const getApiOpenapiJsonQueryKey = (
  options?: Options<GetApiOpenapiJsonData>
) => createQueryKey('getApiOpenapiJson', options)

/**
 * Get OpenAPI specification
 * Returns the OpenAPI specification for the API
 */
export const getApiOpenapiJsonOptions = (
  options?: Options<GetApiOpenapiJsonData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOpenapiJson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiOpenapiJsonQueryKey(options),
  })
}

export const getApiV1BetaClientsQueryKey = (
  options?: Options<GetApiV1BetaClientsData>
) => createQueryKey('getApiV1BetaClients', options)

/**
 * List all clients
 * List all registered clients in ToolHive
 */
export const getApiV1BetaClientsOptions = (
  options?: Options<GetApiV1BetaClientsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaClientsQueryKey(options),
  })
}

/**
 * Register a new client
 * Register a new client with ToolHive
 */
export const postApiV1BetaClientsMutation = (
  options?: Partial<Options<PostApiV1BetaClientsData>>
): UseMutationOptions<
  PostApiV1BetaClientsResponse,
  PostApiV1BetaClientsError,
  Options<PostApiV1BetaClientsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaClientsResponse,
    PostApiV1BetaClientsError,
    Options<PostApiV1BetaClientsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaClients({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Register multiple clients
 * Register multiple clients with ToolHive
 */
export const postApiV1BetaClientsRegisterMutation = (
  options?: Partial<Options<PostApiV1BetaClientsRegisterData>>
): UseMutationOptions<
  PostApiV1BetaClientsRegisterResponse,
  PostApiV1BetaClientsRegisterError,
  Options<PostApiV1BetaClientsRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaClientsRegisterResponse,
    PostApiV1BetaClientsRegisterError,
    Options<PostApiV1BetaClientsRegisterData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaClientsRegister({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Unregister multiple clients
 * Unregister multiple clients from ToolHive
 */
export const postApiV1BetaClientsUnregisterMutation = (
  options?: Partial<Options<PostApiV1BetaClientsUnregisterData>>
): UseMutationOptions<
  PostApiV1BetaClientsUnregisterResponse,
  PostApiV1BetaClientsUnregisterError,
  Options<PostApiV1BetaClientsUnregisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaClientsUnregisterResponse,
    PostApiV1BetaClientsUnregisterError,
    Options<PostApiV1BetaClientsUnregisterData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaClientsUnregister({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Unregister a client
 * Unregister a client from ToolHive
 */
export const deleteApiV1BetaClientsByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaClientsByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaClientsByNameResponse,
  DeleteApiV1BetaClientsByNameError,
  Options<DeleteApiV1BetaClientsByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaClientsByNameResponse,
    DeleteApiV1BetaClientsByNameError,
    Options<DeleteApiV1BetaClientsByNameData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiV1BetaClientsByName({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Unregister a client from a specific group
 * Unregister a client from a specific group in ToolHive
 */
export const deleteApiV1BetaClientsByNameGroupsByGroupMutation = (
  options?: Partial<Options<DeleteApiV1BetaClientsByNameGroupsByGroupData>>
): UseMutationOptions<
  DeleteApiV1BetaClientsByNameGroupsByGroupResponse,
  DeleteApiV1BetaClientsByNameGroupsByGroupError,
  Options<DeleteApiV1BetaClientsByNameGroupsByGroupData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaClientsByNameGroupsByGroupResponse,
    DeleteApiV1BetaClientsByNameGroupsByGroupError,
    Options<DeleteApiV1BetaClientsByNameGroupsByGroupData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiV1BetaClientsByNameGroupsByGroup({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaDiscoveryClientsQueryKey = (
  options?: Options<GetApiV1BetaDiscoveryClientsData>
) => createQueryKey('getApiV1BetaDiscoveryClients', options)

/**
 * List all clients status
 * List all clients compatible with ToolHive and their status
 */
export const getApiV1BetaDiscoveryClientsOptions = (
  options?: Options<GetApiV1BetaDiscoveryClientsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaDiscoveryClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaDiscoveryClientsQueryKey(options),
  })
}

export const getApiV1BetaGroupsQueryKey = (
  options?: Options<GetApiV1BetaGroupsData>
) => createQueryKey('getApiV1BetaGroups', options)

/**
 * List all groups
 * Get a list of all groups
 */
export const getApiV1BetaGroupsOptions = (
  options?: Options<GetApiV1BetaGroupsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaGroupsQueryKey(options),
  })
}

/**
 * Create a new group
 * Create a new group with the specified name
 */
export const postApiV1BetaGroupsMutation = (
  options?: Partial<Options<PostApiV1BetaGroupsData>>
): UseMutationOptions<
  PostApiV1BetaGroupsResponse,
  PostApiV1BetaGroupsError,
  Options<PostApiV1BetaGroupsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaGroupsResponse,
    PostApiV1BetaGroupsError,
    Options<PostApiV1BetaGroupsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaGroups({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete a group
 * Delete a group by name.
 */
export const deleteApiV1BetaGroupsByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaGroupsByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaGroupsByNameResponse,
  DeleteApiV1BetaGroupsByNameError,
  Options<DeleteApiV1BetaGroupsByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaGroupsByNameResponse,
    DeleteApiV1BetaGroupsByNameError,
    Options<DeleteApiV1BetaGroupsByNameData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiV1BetaGroupsByName({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaGroupsByNameQueryKey = (
  options: Options<GetApiV1BetaGroupsByNameData>
) => createQueryKey('getApiV1BetaGroupsByName', options)

/**
 * Get group details
 * Get details of a specific group
 */
export const getApiV1BetaGroupsByNameOptions = (
  options: Options<GetApiV1BetaGroupsByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaGroupsByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaGroupsByNameQueryKey(options),
  })
}

export const getApiV1BetaRegistryQueryKey = (
  options?: Options<GetApiV1BetaRegistryData>
) => createQueryKey('getApiV1BetaRegistry', options)

/**
 * List registries
 * Get a list of the current registries
 */
export const getApiV1BetaRegistryOptions = (
  options?: Options<GetApiV1BetaRegistryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryQueryKey(options),
  })
}

/**
 * Add a registry
 * Add a new registry
 */
export const postApiV1BetaRegistryMutation = (
  options?: Partial<Options<PostApiV1BetaRegistryData>>
): UseMutationOptions<
  unknown,
  PostApiV1BetaRegistryError,
  Options<PostApiV1BetaRegistryData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiV1BetaRegistryError,
    Options<PostApiV1BetaRegistryData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaRegistry({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Remove a registry
 * Remove a specific registry
 */
export const deleteApiV1BetaRegistryByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaRegistryByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaRegistryByNameResponse,
  DeleteApiV1BetaRegistryByNameError,
  Options<DeleteApiV1BetaRegistryByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaRegistryByNameResponse,
    DeleteApiV1BetaRegistryByNameError,
    Options<DeleteApiV1BetaRegistryByNameData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiV1BetaRegistryByName({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaRegistryByNameQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameData>
) => createQueryKey('getApiV1BetaRegistryByName', options)

/**
 * Get a registry
 * Get details of a specific registry
 */
export const getApiV1BetaRegistryByNameOptions = (
  options: Options<GetApiV1BetaRegistryByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameQueryKey(options),
  })
}

/**
 * Update registry configuration
 * Update registry URL or local path for the default registry
 */
export const putApiV1BetaRegistryByNameMutation = (
  options?: Partial<Options<PutApiV1BetaRegistryByNameData>>
): UseMutationOptions<
  PutApiV1BetaRegistryByNameResponse,
  PutApiV1BetaRegistryByNameError,
  Options<PutApiV1BetaRegistryByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiV1BetaRegistryByNameResponse,
    PutApiV1BetaRegistryByNameError,
    Options<PutApiV1BetaRegistryByNameData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await putApiV1BetaRegistryByName({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaRegistryByNameServersQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameServersData>
) => createQueryKey('getApiV1BetaRegistryByNameServers', options)

/**
 * List servers in a registry
 * Get a list of servers in a specific registry
 */
export const getApiV1BetaRegistryByNameServersOptions = (
  options: Options<GetApiV1BetaRegistryByNameServersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByNameServers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameServersQueryKey(options),
  })
}

export const getApiV1BetaRegistryByNameServersByServerNameQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameServersByServerNameData>
) => createQueryKey('getApiV1BetaRegistryByNameServersByServerName', options)

/**
 * Get a server from a registry
 * Get details of a specific server in a registry
 */
export const getApiV1BetaRegistryByNameServersByServerNameOptions = (
  options: Options<GetApiV1BetaRegistryByNameServersByServerNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByNameServersByServerName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameServersByServerNameQueryKey(options),
  })
}

/**
 * Setup or reconfigure secrets provider
 * Setup the secrets provider with the specified type and configuration.
 */
export const postApiV1BetaSecretsMutation = (
  options?: Partial<Options<PostApiV1BetaSecretsData>>
): UseMutationOptions<
  PostApiV1BetaSecretsResponse,
  PostApiV1BetaSecretsError,
  Options<PostApiV1BetaSecretsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaSecretsResponse,
    PostApiV1BetaSecretsError,
    Options<PostApiV1BetaSecretsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaSecrets({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaSecretsDefaultQueryKey = (
  options?: Options<GetApiV1BetaSecretsDefaultData>
) => createQueryKey('getApiV1BetaSecretsDefault', options)

/**
 * Get secrets provider details
 * Get details of the default secrets provider
 */
export const getApiV1BetaSecretsDefaultOptions = (
  options?: Options<GetApiV1BetaSecretsDefaultData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaSecretsDefault({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaSecretsDefaultQueryKey(options),
  })
}

export const getApiV1BetaSecretsDefaultKeysQueryKey = (
  options?: Options<GetApiV1BetaSecretsDefaultKeysData>
) => createQueryKey('getApiV1BetaSecretsDefaultKeys', options)

/**
 * List secrets
 * Get a list of all secret keys from the default provider
 */
export const getApiV1BetaSecretsDefaultKeysOptions = (
  options?: Options<GetApiV1BetaSecretsDefaultKeysData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaSecretsDefaultKeys({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaSecretsDefaultKeysQueryKey(options),
  })
}

/**
 * Create a new secret
 * Create a new secret in the default provider (encrypted provider only)
 */
export const postApiV1BetaSecretsDefaultKeysMutation = (
  options?: Partial<Options<PostApiV1BetaSecretsDefaultKeysData>>
): UseMutationOptions<
  PostApiV1BetaSecretsDefaultKeysResponse,
  PostApiV1BetaSecretsDefaultKeysError,
  Options<PostApiV1BetaSecretsDefaultKeysData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaSecretsDefaultKeysResponse,
    PostApiV1BetaSecretsDefaultKeysError,
    Options<PostApiV1BetaSecretsDefaultKeysData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaSecretsDefaultKeys({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete a secret
 * Delete a secret from the default provider (encrypted provider only)
 */
export const deleteApiV1BetaSecretsDefaultKeysByKeyMutation = (
  options?: Partial<Options<DeleteApiV1BetaSecretsDefaultKeysByKeyData>>
): UseMutationOptions<
  DeleteApiV1BetaSecretsDefaultKeysByKeyResponse,
  DeleteApiV1BetaSecretsDefaultKeysByKeyError,
  Options<DeleteApiV1BetaSecretsDefaultKeysByKeyData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaSecretsDefaultKeysByKeyResponse,
    DeleteApiV1BetaSecretsDefaultKeysByKeyError,
    Options<DeleteApiV1BetaSecretsDefaultKeysByKeyData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiV1BetaSecretsDefaultKeysByKey({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Update a secret
 * Update an existing secret in the default provider (encrypted provider only)
 */
export const putApiV1BetaSecretsDefaultKeysByKeyMutation = (
  options?: Partial<Options<PutApiV1BetaSecretsDefaultKeysByKeyData>>
): UseMutationOptions<
  PutApiV1BetaSecretsDefaultKeysByKeyResponse,
  PutApiV1BetaSecretsDefaultKeysByKeyError,
  Options<PutApiV1BetaSecretsDefaultKeysByKeyData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiV1BetaSecretsDefaultKeysByKeyResponse,
    PutApiV1BetaSecretsDefaultKeysByKeyError,
    Options<PutApiV1BetaSecretsDefaultKeysByKeyData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await putApiV1BetaSecretsDefaultKeysByKey({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaVersionQueryKey = (
  options?: Options<GetApiV1BetaVersionData>
) => createQueryKey('getApiV1BetaVersion', options)

/**
 * Get server version
 * Returns the current version of the server
 */
export const getApiV1BetaVersionOptions = (
  options?: Options<GetApiV1BetaVersionData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaVersion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaVersionQueryKey(options),
  })
}

export const getApiV1BetaWorkloadsQueryKey = (
  options?: Options<GetApiV1BetaWorkloadsData>
) => createQueryKey('getApiV1BetaWorkloads', options)

/**
 * List all workloads
 * Get a list of all running workloads, optionally filtered by group
 */
export const getApiV1BetaWorkloadsOptions = (
  options?: Options<GetApiV1BetaWorkloadsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloads({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsQueryKey(options),
  })
}

/**
 * Create a new workload
 * Create and start a new workload
 */
export const postApiV1BetaWorkloadsMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsResponse,
  PostApiV1BetaWorkloadsError,
  Options<PostApiV1BetaWorkloadsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsResponse,
    PostApiV1BetaWorkloadsError,
    Options<PostApiV1BetaWorkloadsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaWorkloads({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete workloads in bulk
 * Delete multiple workloads by name or by group
 */
export const postApiV1BetaWorkloadsDeleteMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsDeleteData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsDeleteResponse,
  PostApiV1BetaWorkloadsDeleteError,
  Options<PostApiV1BetaWorkloadsDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsDeleteResponse,
    PostApiV1BetaWorkloadsDeleteError,
    Options<PostApiV1BetaWorkloadsDeleteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaWorkloadsDelete({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Restart workloads in bulk
 * Restart multiple workloads by name or by group
 */
export const postApiV1BetaWorkloadsRestartMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsRestartData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsRestartResponse,
  PostApiV1BetaWorkloadsRestartError,
  Options<PostApiV1BetaWorkloadsRestartData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsRestartResponse,
    PostApiV1BetaWorkloadsRestartError,
    Options<PostApiV1BetaWorkloadsRestartData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaWorkloadsRestart({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Stop workloads in bulk
 * Stop multiple workloads by name or by group
 */
export const postApiV1BetaWorkloadsStopMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsStopData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsStopResponse,
  PostApiV1BetaWorkloadsStopError,
  Options<PostApiV1BetaWorkloadsStopData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsStopResponse,
    PostApiV1BetaWorkloadsStopError,
    Options<PostApiV1BetaWorkloadsStopData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaWorkloadsStop({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete a workload
 * Delete a workload
 */
export const deleteApiV1BetaWorkloadsByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaWorkloadsByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaWorkloadsByNameResponse,
  DeleteApiV1BetaWorkloadsByNameError,
  Options<DeleteApiV1BetaWorkloadsByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaWorkloadsByNameResponse,
    DeleteApiV1BetaWorkloadsByNameError,
    Options<DeleteApiV1BetaWorkloadsByNameData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiV1BetaWorkloadsByName({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaWorkloadsByNameQueryKey = (
  options: Options<GetApiV1BetaWorkloadsByNameData>
) => createQueryKey('getApiV1BetaWorkloadsByName', options)

/**
 * Get workload details
 * Get details of a specific workload
 */
export const getApiV1BetaWorkloadsByNameOptions = (
  options: Options<GetApiV1BetaWorkloadsByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloadsByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsByNameQueryKey(options),
  })
}

/**
 * Update workload
 * Update an existing workload configuration
 */
export const postApiV1BetaWorkloadsByNameEditMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsByNameEditData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsByNameEditResponse,
  PostApiV1BetaWorkloadsByNameEditError,
  Options<PostApiV1BetaWorkloadsByNameEditData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsByNameEditResponse,
    PostApiV1BetaWorkloadsByNameEditError,
    Options<PostApiV1BetaWorkloadsByNameEditData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaWorkloadsByNameEdit({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaWorkloadsByNameExportQueryKey = (
  options: Options<GetApiV1BetaWorkloadsByNameExportData>
) => createQueryKey('getApiV1BetaWorkloadsByNameExport', options)

/**
 * Export workload configuration
 * Export a workload's run configuration as JSON
 */
export const getApiV1BetaWorkloadsByNameExportOptions = (
  options: Options<GetApiV1BetaWorkloadsByNameExportData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloadsByNameExport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsByNameExportQueryKey(options),
  })
}

export const getApiV1BetaWorkloadsByNameLogsQueryKey = (
  options: Options<GetApiV1BetaWorkloadsByNameLogsData>
) => createQueryKey('getApiV1BetaWorkloadsByNameLogs', options)

/**
 * Get logs for a specific workload
 * Retrieve at most 100 lines of logs for a specific workload by name.
 */
export const getApiV1BetaWorkloadsByNameLogsOptions = (
  options: Options<GetApiV1BetaWorkloadsByNameLogsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloadsByNameLogs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsByNameLogsQueryKey(options),
  })
}

/**
 * Restart a workload
 * Restart a running workload
 */
export const postApiV1BetaWorkloadsByNameRestartMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsByNameRestartData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsByNameRestartResponse,
  PostApiV1BetaWorkloadsByNameRestartError,
  Options<PostApiV1BetaWorkloadsByNameRestartData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsByNameRestartResponse,
    PostApiV1BetaWorkloadsByNameRestartError,
    Options<PostApiV1BetaWorkloadsByNameRestartData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaWorkloadsByNameRestart({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaWorkloadsByNameStatusQueryKey = (
  options: Options<GetApiV1BetaWorkloadsByNameStatusData>
) => createQueryKey('getApiV1BetaWorkloadsByNameStatus', options)

/**
 * Get workload status
 * Get the current status of a specific workload
 */
export const getApiV1BetaWorkloadsByNameStatusOptions = (
  options: Options<GetApiV1BetaWorkloadsByNameStatusData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloadsByNameStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsByNameStatusQueryKey(options),
  })
}

/**
 * Stop a workload
 * Stop a running workload
 */
export const postApiV1BetaWorkloadsByNameStopMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsByNameStopData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsByNameStopResponse,
  PostApiV1BetaWorkloadsByNameStopError,
  Options<PostApiV1BetaWorkloadsByNameStopData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsByNameStopResponse,
    PostApiV1BetaWorkloadsByNameStopError,
    Options<PostApiV1BetaWorkloadsByNameStopData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiV1BetaWorkloadsByNameStop({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getHealthQueryKey = (options?: Options<GetHealthData>) =>
  createQueryKey('getHealth', options)

/**
 * Health check
 * Check if the API is healthy
 */
export const getHealthOptions = (options?: Options<GetHealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getHealthQueryKey(options),
  })
}
