{
  "components": {
    "schemas": {
      "client.Client": {
        "properties": {
          "name": { "$ref": "#/components/schemas/client.MCPClient" }
        },
        "type": "object"
      },
      "client.MCPClient": {
        "type": "string",
        "x-enum-varnames": [
          "RooCode",
          "Cline",
          "Cursor",
          "VSCodeInsider",
          "VSCode",
          "ClaudeCode"
        ]
      },
      "client.MCPClientStatus": {
        "properties": {
          "client_type": {
            "description": "ClientType is the type of MCP client",
            "type": "string",
            "x-enum-varnames": [
              "RooCode",
              "Cline",
              "Cursor",
              "VSCodeInsider",
              "VSCode",
              "ClaudeCode"
            ]
          },
          "installed": {
            "description": "Installed indicates whether the client is installed on the system",
            "type": "boolean"
          },
          "registered": {
            "description": "Registered indicates whether the client is registered in the ToolHive configuration",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "permissions.NetworkPermissions": {
        "description": "Network defines network permissions",
        "properties": {
          "outbound": {
            "$ref": "#/components/schemas/permissions.OutboundNetworkPermissions"
          }
        },
        "type": "object"
      },
      "permissions.OutboundNetworkPermissions": {
        "description": "Outbound defines outbound network permissions",
        "properties": {
          "allow_host": {
            "description": "AllowHost is a list of allowed hosts",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          },
          "allow_port": {
            "description": "AllowPort is a list of allowed ports",
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": false
          },
          "insecure_allow_all": {
            "description": "InsecureAllowAll allows all outbound network connections",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "permissions.Profile": {
        "description": "Permission profile to apply",
        "properties": {
          "name": {
            "description": "Name is the name of the profile",
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/permissions.NetworkPermissions"
          },
          "read": {
            "description": "Read is a list of mount declarations that the container can read from\nThese can be in the following formats:\n- A single path: The same path will be mounted from host to container\n- host-path:container-path: Different paths for host and container\n- resource-uri:container-path: Mount a resource identified by URI to a container path",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          },
          "write": {
            "description": "Write is a list of mount declarations that the container can write to\nThese follow the same format as Read mounts but with write permissions",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "registry.EnvVar": {
        "properties": {
          "default": {
            "description": "Default is the value to use if the environment variable is not explicitly provided\nOnly used for non-required variables",
            "type": "string"
          },
          "description": {
            "description": "Description is a human-readable explanation of the variable's purpose",
            "type": "string"
          },
          "name": {
            "description": "Name is the environment variable name (e.g., API_KEY)",
            "type": "string"
          },
          "required": {
            "description": "Required indicates whether this environment variable must be provided\nIf true and not provided via command line or secrets, the user will be prompted for a value",
            "type": "boolean"
          },
          "secret": {
            "description": "Secret indicates whether this environment variable contains sensitive information\nIf true, the value will be stored as a secret rather than as a plain environment variable",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "registry.ImageMetadata": {
        "description": "Server details",
        "properties": {
          "args": {
            "description": "Args are the default command-line arguments to pass to the MCP server container.\nThese arguments will be prepended to any command-line arguments provided by the user.",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          },
          "custom_metadata": {
            "additionalProperties": {},
            "description": "CustomMetadata allows for additional user-defined metadata",
            "type": "object"
          },
          "description": {
            "description": "Description is a human-readable description of the server's purpose and functionality",
            "type": "string"
          },
          "docker_tags": {
            "description": "DockerTags lists the available Docker tags for this server image",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          },
          "env_vars": {
            "description": "EnvVars defines environment variables that can be passed to the server",
            "items": { "$ref": "#/components/schemas/registry.EnvVar" },
            "type": "array",
            "uniqueItems": false
          },
          "image": {
            "description": "Image is the Docker image reference for the MCP server",
            "type": "string"
          },
          "metadata": { "$ref": "#/components/schemas/registry.Metadata" },
          "name": {
            "description": "Name is the identifier for the MCP server, used when referencing the server in commands\nIf not provided, it will be auto-generated from the image name",
            "type": "string"
          },
          "permissions": { "$ref": "#/components/schemas/permissions.Profile" },
          "provenance": { "$ref": "#/components/schemas/registry.Provenance" },
          "repository_url": {
            "description": "RepositoryURL is the URL to the source code repository for the server",
            "type": "string"
          },
          "status": {
            "description": "The Status indicates whether the server is currently active or deprecated",
            "type": "string"
          },
          "tags": {
            "description": "Tags are categorization labels for the server to aid in discovery and filtering",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          },
          "target_port": {
            "description": "TargetPort is the port for the container to expose (only applicable to SSE and Streamable HTTP transports)",
            "type": "integer"
          },
          "tier": {
            "description": "Tier represents the tier classification level of the server, e.g., \"official\" or \"community\" driven",
            "type": "string"
          },
          "tools": {
            "description": "Tools is a list of tool names provided by this MCP server",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          },
          "transport": {
            "description": "Transport defines the communication protocol for the server (stdio, sse, or streamable-http)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "registry.Metadata": {
        "description": "Metadata contains additional information about the server such as popularity metrics",
        "properties": {
          "last_updated": {
            "description": "LastUpdated is the timestamp when the server was last updated, in RFC3339 format",
            "type": "string"
          },
          "pulls": {
            "description": "Pulls indicates how many times the server image has been downloaded",
            "type": "integer"
          },
          "stars": {
            "description": "Stars represents the popularity rating or number of stars for the server",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "registry.Provenance": {
        "description": "Provenance contains verification and signing metadata",
        "properties": {
          "attestation": {
            "$ref": "#/components/schemas/registry.VerifiedAttestation"
          },
          "cert_issuer": { "type": "string" },
          "repository_ref": { "type": "string" },
          "repository_uri": { "type": "string" },
          "runner_environment": { "type": "string" },
          "signer_identity": { "type": "string" },
          "sigstore_url": { "type": "string" }
        },
        "type": "object"
      },
      "registry.Registry": {
        "description": "Full registry data",
        "properties": {
          "last_updated": {
            "description": "LastUpdated is the timestamp when the registry was last updated, in RFC3339 format",
            "type": "string"
          },
          "servers": {
            "additionalProperties": {
              "$ref": "#/components/schemas/registry.ImageMetadata"
            },
            "description": "Servers is a map of server names to their corresponding server definitions",
            "type": "object"
          },
          "version": {
            "description": "Version is the schema version of the registry",
            "type": "string"
          }
        },
        "type": "object"
      },
      "registry.VerifiedAttestation": {
        "properties": {
          "predicate": {},
          "predicate_type": { "type": "string" }
        },
        "type": "object"
      },
      "secrets.SecretParameter": {
        "properties": {
          "name": { "type": "string" },
          "target": { "type": "string" }
        },
        "type": "object"
      },
      "types.TransportType": {
        "description": "TransportType is the type of transport used for this workload.",
        "type": "string",
        "x-enum-varnames": [
          "TransportTypeStdio",
          "TransportTypeSSE",
          "TransportTypeStreamableHTTP",
          "TransportTypeInspector"
        ]
      },
      "v1.bulkClientRequest": {
        "properties": {
          "names": {
            "description": "Names is the list of client names to operate on.",
            "items": {
              "type": "string",
              "x-enum-varnames": [
                "RooCode",
                "Cline",
                "Cursor",
                "VSCodeInsider",
                "VSCode",
                "ClaudeCode"
              ]
            },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "v1.bulkOperationRequest": {
        "description": "Request to perform bulk operations on workloads",
        "properties": {
          "names": {
            "description": "Names of the workloads to operate on",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "v1.clientStatusResponse": {
        "properties": {
          "clients": {
            "items": { "$ref": "#/components/schemas/client.MCPClientStatus" },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "v1.createClientRequest": {
        "properties": {
          "name": {
            "description": "Name is the type of the client to register.",
            "type": "string",
            "x-enum-varnames": [
              "RooCode",
              "Cline",
              "Cursor",
              "VSCodeInsider",
              "VSCode",
              "ClaudeCode"
            ]
          }
        },
        "type": "object"
      },
      "v1.createClientResponse": {
        "properties": {
          "name": {
            "description": "Name is the type of the client that was registered.",
            "type": "string",
            "x-enum-varnames": [
              "RooCode",
              "Cline",
              "Cursor",
              "VSCodeInsider",
              "VSCode",
              "ClaudeCode"
            ]
          }
        },
        "type": "object"
      },
      "v1.createRequest": {
        "description": "Request to create a new workload",
        "properties": {
          "authz_config": {
            "description": "Authorization configuration",
            "type": "string"
          },
          "cmd_arguments": {
            "description": "Command arguments to pass to the container",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          },
          "env_vars": {
            "description": "Environment variables to set in the container",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          },
          "host": { "description": "Host to bind to", "type": "string" },
          "image": { "description": "Docker image to use", "type": "string" },
          "name": { "description": "Name of the workload", "type": "string" },
          "network_isolation": {
            "description": "Whether network isolation is turned on. This applies the rules in the permission profile.",
            "type": "boolean"
          },
          "oidc": { "$ref": "#/components/schemas/v1.oidcOptions" },
          "permission_profile": {
            "$ref": "#/components/schemas/permissions.Profile"
          },
          "proxy_mode": {
            "description": "Proxy mode to use",
            "type": "string"
          },
          "secrets": {
            "description": "Secret parameters to inject",
            "items": { "$ref": "#/components/schemas/secrets.SecretParameter" },
            "type": "array",
            "uniqueItems": false
          },
          "target_port": {
            "description": "Port to expose from the container",
            "type": "integer"
          },
          "transport": {
            "description": "Transport configuration",
            "type": "string"
          },
          "volumes": {
            "description": "Volume mounts",
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "v1.createSecretRequest": {
        "description": "Request to create a new secret",
        "properties": {
          "key": { "description": "Secret key name", "type": "string" },
          "value": { "description": "Secret value", "type": "string" }
        },
        "type": "object"
      },
      "v1.createSecretResponse": {
        "description": "Response after creating a secret",
        "properties": {
          "key": {
            "description": "Secret key that was created",
            "type": "string"
          },
          "message": { "description": "Success message", "type": "string" }
        },
        "type": "object"
      },
      "v1.createWorkloadResponse": {
        "description": "Response after successfully creating a workload",
        "properties": {
          "name": {
            "description": "Name of the created workload",
            "type": "string"
          },
          "port": {
            "description": "Port the workload is listening on",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "v1.getRegistryResponse": {
        "description": "Response containing registry details",
        "properties": {
          "last_updated": {
            "description": "Last updated timestamp",
            "type": "string"
          },
          "name": { "description": "Name of the registry", "type": "string" },
          "registry": { "$ref": "#/components/schemas/registry.Registry" },
          "server_count": {
            "description": "Number of servers in the registry",
            "type": "integer"
          },
          "version": {
            "description": "Version of the registry schema",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.getSecretsProviderResponse": {
        "description": "Response containing secrets provider details",
        "properties": {
          "capabilities": {
            "$ref": "#/components/schemas/v1.providerCapabilitiesResponse"
          },
          "name": {
            "description": "Name of the secrets provider",
            "type": "string"
          },
          "provider_type": {
            "description": "Type of the secrets provider",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.getServerResponse": {
        "description": "Response containing server details",
        "properties": {
          "server": { "$ref": "#/components/schemas/registry.ImageMetadata" }
        },
        "type": "object"
      },
      "v1.listSecretsResponse": {
        "description": "Response containing a list of secret keys",
        "properties": {
          "keys": {
            "description": "List of secret keys",
            "items": { "$ref": "#/components/schemas/v1.secretKeyResponse" },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "v1.listServersResponse": {
        "description": "Response containing a list of servers",
        "properties": {
          "servers": {
            "description": "List of servers in the registry",
            "items": { "$ref": "#/components/schemas/registry.ImageMetadata" },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "v1.oidcOptions": {
        "description": "OIDC configuration options",
        "properties": {
          "allow_opaque_tokens": {
            "description": "Allow opaque tokens (non-JWT) for OIDC validation",
            "type": "boolean"
          },
          "audience": { "description": "Expected audience", "type": "string" },
          "client_id": { "description": "OAuth2 client ID", "type": "string" },
          "issuer": { "description": "OIDC issuer URL", "type": "string" },
          "jwks_url": {
            "description": "JWKS URL for key verification",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.providerCapabilitiesResponse": {
        "description": "Capabilities of the secrets provider",
        "properties": {
          "can_cleanup": {
            "description": "Whether the provider can cleanup all secrets",
            "type": "boolean"
          },
          "can_delete": {
            "description": "Whether the provider can delete secrets",
            "type": "boolean"
          },
          "can_list": {
            "description": "Whether the provider can list secrets",
            "type": "boolean"
          },
          "can_read": {
            "description": "Whether the provider can read secrets",
            "type": "boolean"
          },
          "can_write": {
            "description": "Whether the provider can write secrets",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "v1.registryInfo": {
        "description": "Basic information about a registry",
        "properties": {
          "last_updated": {
            "description": "Last updated timestamp",
            "type": "string"
          },
          "name": { "description": "Name of the registry", "type": "string" },
          "server_count": {
            "description": "Number of servers in the registry",
            "type": "integer"
          },
          "version": {
            "description": "Version of the registry schema",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.registryListResponse": {
        "description": "Response containing a list of registries",
        "properties": {
          "registries": {
            "description": "List of registries",
            "items": { "$ref": "#/components/schemas/v1.registryInfo" },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "v1.secretKeyResponse": {
        "description": "Secret key information",
        "properties": {
          "description": {
            "description": "Optional description of the secret",
            "type": "string"
          },
          "key": { "description": "Secret key name", "type": "string" }
        },
        "type": "object"
      },
      "v1.setupSecretsRequest": {
        "description": "Request to setup a secrets provider",
        "properties": {
          "password": {
            "description": "Password for encrypted provider (optional, can be set via environment variable)\nTODO Review environment variable for this",
            "type": "string"
          },
          "provider_type": {
            "description": "Type of the secrets provider (encrypted, 1password, none)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.setupSecretsResponse": {
        "description": "Response after initializing a secrets provider",
        "properties": {
          "message": { "description": "Success message", "type": "string" },
          "provider_type": {
            "description": "Type of the secrets provider that was setup",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.updateSecretRequest": {
        "description": "Request to update an existing secret",
        "properties": {
          "value": { "description": "New secret value", "type": "string" }
        },
        "type": "object"
      },
      "v1.updateSecretResponse": {
        "description": "Response after updating a secret",
        "properties": {
          "key": {
            "description": "Secret key that was updated",
            "type": "string"
          },
          "message": { "description": "Success message", "type": "string" }
        },
        "type": "object"
      },
      "v1.versionResponse": {
        "properties": { "version": { "type": "string" } },
        "type": "object"
      },
      "v1.workloadListResponse": {
        "description": "Response containing a list of workloads",
        "properties": {
          "workloads": {
            "description": "List of container information for each workload",
            "items": { "$ref": "#/components/schemas/workloads.Workload" },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "workloads.Workload": {
        "properties": {
          "created_at": {
            "description": "CreatedAt is the timestamp when the workload was created.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": { "type": "string" },
            "description": "Labels are the container labels (excluding standard ToolHive labels)",
            "type": "object"
          },
          "name": {
            "description": "Name is the name of the workload.\nIt is used as a unique identifier.",
            "type": "string"
          },
          "package": {
            "description": "Package specifies the Workload Package used to create this Workload.",
            "type": "string"
          },
          "port": {
            "description": "Port is the port on which the workload is exposed.\nThis is embedded in the URL.",
            "type": "integer"
          },
          "status": { "$ref": "#/components/schemas/workloads.WorkloadStatus" },
          "status_context": {
            "description": "StatusContext provides additional context about the workload's status.\nThe exact meaning is determined by the status and the underlying runtime.",
            "type": "string"
          },
          "tool_type": {
            "description": "ToolType is the type of tool this workload represents.\nFor now, it will always be \"mcp\" - representing an MCP server.",
            "type": "string"
          },
          "transport_type": {
            "$ref": "#/components/schemas/types.TransportType"
          },
          "url": {
            "description": "URL is the URL of the workload exposed by the ToolHive proxy.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "workloads.WorkloadStatus": {
        "description": "Status is the current status of the workload.",
        "type": "string",
        "x-enum-varnames": [
          "WorkloadStatusRunning",
          "WorkloadStatusStopped",
          "WorkloadStatusError",
          "WorkloadStatusStarting",
          "WorkloadStatusStopping",
          "WorkloadStatusUnhealthy",
          "WorkloadStatusRemoving",
          "WorkloadStatusUnknown"
        ]
      }
    }
  },
  "info": {
    "description": "This is the ToolHive API server.",
    "title": "ToolHive API",
    "version": "1.0"
  },
  "externalDocs": { "description": "", "url": "" },
  "paths": {
    "/api/openapi.json": {
      "get": {
        "description": "Returns the OpenAPI specification for the API",
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "object" } }
            },
            "description": "OpenAPI specification"
          }
        },
        "summary": "Get OpenAPI specification",
        "tags": ["system"]
      }
    },
    "/api/v1beta/clients": {
      "get": {
        "description": "List all registered clients in ToolHive",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/client.Client" },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "List all clients",
        "tags": ["clients"]
      },
      "post": {
        "description": "Register a new client with ToolHive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.createClientRequest"
              }
            }
          },
          "description": "Client to register",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.createClientResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Invalid request"
          }
        },
        "summary": "Register a new client",
        "tags": ["clients"]
      }
    },
    "/api/v1beta/clients/register": {
      "post": {
        "description": "Register multiple clients with ToolHive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/v1.bulkClientRequest" }
            }
          },
          "description": "Clients to register",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/v1.createClientResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Invalid request"
          }
        },
        "summary": "Register multiple clients",
        "tags": ["clients"]
      }
    },
    "/api/v1beta/clients/unregister": {
      "post": {
        "description": "Unregister multiple clients from ToolHive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/v1.bulkClientRequest" }
            }
          },
          "description": "Clients to unregister",
          "required": true
        },
        "responses": {
          "204": { "description": "No Content" },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Invalid request"
          }
        },
        "summary": "Unregister multiple clients",
        "tags": ["clients"]
      }
    },
    "/api/v1beta/clients/{name}": {
      "delete": {
        "description": "Unregister a client from ToolHive",
        "parameters": [
          {
            "description": "Client name to unregister",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Invalid request"
          }
        },
        "summary": "Unregister a client",
        "tags": ["clients"]
      }
    },
    "/api/v1beta/discovery/clients": {
      "get": {
        "description": "List all clients compatible with ToolHive and their status",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.clientStatusResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "List all clients status",
        "tags": ["discovery"]
      }
    },
    "/api/v1beta/registry": {
      "get": {
        "description": "Get a list of the current registries",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.registryListResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "List registries",
        "tags": ["registry"]
      },
      "post": {
        "description": "Add a new registry",
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } }
        },
        "responses": {
          "501": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Implemented"
          }
        },
        "summary": "Add a registry",
        "tags": ["registry"]
      }
    },
    "/api/v1beta/registry/{name}": {
      "delete": {
        "description": "Remove a specific registry",
        "parameters": [
          {
            "description": "Registry name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "No Content"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found"
          }
        },
        "summary": "Remove a registry",
        "tags": ["registry"]
      },
      "get": {
        "description": "Get details of a specific registry",
        "parameters": [
          {
            "description": "Registry name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.getRegistryResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get a registry",
        "tags": ["registry"]
      }
    },
    "/api/v1beta/registry/{name}/servers": {
      "get": {
        "description": "Get a list of servers in a specific registry",
        "parameters": [
          {
            "description": "Registry name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.listServersResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found"
          }
        },
        "summary": "List servers in a registry",
        "tags": ["registry"]
      }
    },
    "/api/v1beta/registry/{name}/servers/{serverName}": {
      "get": {
        "description": "Get details of a specific server in a registry",
        "parameters": [
          {
            "description": "Registry name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "ImageMetadata name",
            "in": "path",
            "name": "serverName",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.getServerResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get a server from a registry",
        "tags": ["registry"]
      }
    },
    "/api/v1beta/secrets": {
      "post": {
        "description": "Setup the secrets provider with the specified type and configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.setupSecretsRequest"
              }
            }
          },
          "description": "Setup secrets provider request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.setupSecretsResponse"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          },
          "500": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Setup or reconfigure secrets provider",
        "tags": ["secrets"]
      }
    },
    "/api/v1beta/secrets/default": {
      "get": {
        "description": "Get details of the default secrets provider",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.getSecretsProviderResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found - Provider not setup"
          },
          "500": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get secrets provider details",
        "tags": ["secrets"]
      }
    },
    "/api/v1beta/secrets/default/keys": {
      "get": {
        "description": "Get a list of all secret keys from the default provider",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.listSecretsResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found - Provider not setup"
          },
          "405": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Method Not Allowed - Provider doesn't support listing"
          },
          "500": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "List secrets",
        "tags": ["secrets"]
      },
      "post": {
        "description": "Create a new secret in the default provider (encrypted provider only)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.createSecretRequest"
              }
            }
          },
          "description": "Create secret request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.createSecretResponse"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found - Provider not setup"
          },
          "405": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Method Not Allowed - Provider doesn't support writing"
          },
          "409": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Conflict - Secret already exists"
          },
          "500": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Create a new secret",
        "tags": ["secrets"]
      }
    },
    "/api/v1beta/secrets/default/keys/{key}": {
      "delete": {
        "description": "Delete a secret from the default provider (encrypted provider only)",
        "parameters": [
          {
            "description": "Secret key",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "No Content"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found - Provider not setup or secret not found"
          },
          "405": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Method Not Allowed - Provider doesn't support deletion"
          },
          "500": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Delete a secret",
        "tags": ["secrets"]
      },
      "put": {
        "description": "Update an existing secret in the default provider (encrypted provider only)",
        "parameters": [
          {
            "description": "Secret key",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.updateSecretRequest"
              }
            }
          },
          "description": "Update secret request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.updateSecretResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found - Provider not setup or secret not found"
          },
          "405": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Method Not Allowed - Provider doesn't support writing"
          },
          "500": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update a secret",
        "tags": ["secrets"]
      }
    },
    "/api/v1beta/version": {
      "get": {
        "description": "Returns the current version of the server",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1.versionResponse" }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get server version",
        "tags": ["version"]
      }
    },
    "/api/v1beta/workloads": {
      "get": {
        "description": "Get a list of all running workloads",
        "parameters": [
          {
            "description": "List all workloads, including stopped ones",
            "in": "query",
            "name": "all",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.workloadListResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "List all workloads",
        "tags": ["workloads"]
      },
      "post": {
        "description": "Create and start a new workload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/v1.createRequest" }
            }
          },
          "description": "Create workload request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.createWorkloadResponse"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          },
          "409": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Conflict"
          }
        },
        "summary": "Create a new workload",
        "tags": ["workloads"]
      }
    },
    "/api/v1beta/workloads/delete": {
      "post": {
        "description": "Delete multiple workloads by name",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.bulkOperationRequest"
              }
            }
          },
          "description": "Bulk delete request",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Delete workloads in bulk",
        "tags": ["workloads"]
      }
    },
    "/api/v1beta/workloads/restart": {
      "post": {
        "description": "Restart multiple workloads by name",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.bulkOperationRequest"
              }
            }
          },
          "description": "Bulk restart request",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Restart workloads in bulk",
        "tags": ["workloads"]
      }
    },
    "/api/v1beta/workloads/stop": {
      "post": {
        "description": "Stop multiple workloads by name",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.bulkOperationRequest"
              }
            }
          },
          "description": "Bulk stop request",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          }
        },
        "summary": "Stop workloads in bulk",
        "tags": ["workloads"]
      }
    },
    "/api/v1beta/workloads/{name}": {
      "delete": {
        "description": "Delete a workload",
        "parameters": [
          {
            "description": "Workload name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found"
          }
        },
        "summary": "Delete a workload",
        "tags": ["workloads"]
      },
      "get": {
        "description": "Get details of a specific workload",
        "parameters": [
          {
            "description": "Workload name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/workloads.Workload" }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get workload details",
        "tags": ["workloads"]
      }
    },
    "/api/v1beta/workloads/{name}/logs": {
      "get": {
        "description": "Retrieve at most 100 lines of logs for a specific workload by name.",
        "parameters": [
          {
            "description": "Workload name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "string" } },
              "text/plain": { "schema": { "type": "string" } }
            },
            "description": "Logs for the specified workload"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get logs for a specific workload",
        "tags": ["logs"]
      }
    },
    "/api/v1beta/workloads/{name}/restart": {
      "post": {
        "description": "Restart a running workload",
        "parameters": [
          {
            "description": "Workload name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found"
          }
        },
        "summary": "Restart a workload",
        "tags": ["workloads"]
      }
    },
    "/api/v1beta/workloads/{name}/stop": {
      "post": {
        "description": "Stop a running workload",
        "parameters": [
          {
            "description": "Workload name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "Not Found"
          }
        },
        "summary": "Stop a workload",
        "tags": ["workloads"]
      }
    },
    "/health": {
      "get": {
        "description": "Check if the API is healthy",
        "responses": {
          "204": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "No Content"
          }
        },
        "summary": "Health check",
        "tags": ["system"]
      }
    }
  },
  "openapi": "3.1.0"
}
